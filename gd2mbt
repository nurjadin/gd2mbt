#!/usr/bin/env python3

import argparse
from pdfminer.high_level import extract_text
from deep_translator import GoogleTranslator
from fpdf import FPDF
import os

# Set up argument parsing
parser = argparse.ArgumentParser(description='Translate a PDF file to a specified language, page by page.')
parser.add_argument('-f', '--file', required=True, help='Input PDF file path')
parser.add_argument('-o', '--output', required=True, help='Output PDF file path')
parser.add_argument('-sl', '--source_language', required=True, help='Source language code (e.g., "id" for Indonesian)')
parser.add_argument('-tl', '--target_language', required=True, help='Target language code (e.g., "en" for English)')
parser.add_argument('-ff', '--font_file', default='DejaVuSans.ttf', help='Path to a TTF font file that supports Unicode characters (default: DejaVuSans.ttf)')
args = parser.parse_args()

# Check if font file exists
if not os.path.isfile(args.font_file):
    print(f"Font file '{args.font_file}' not found. Please provide a valid TTF font file that supports Unicode characters.")
    exit(1)

# Set up the translator
translator = GoogleTranslator(source=args.source_language, target=args.target_language)

# Create a new PDF for the output
pdf = FPDF()
pdf.set_auto_page_break(auto=True, margin=15)

# Add a font that supports Unicode
pdf.add_font('CustomFont', '', args.font_file)
pdf.set_font('CustomFont', '', 12)

# Extract text from the PDF file
text = extract_text(args.file)

# Split the text into pages (assuming form feed character '\f' separates pages)
pages = text.split('\f')

# Translate each page and add to the PDF
for i, page_text in enumerate(pages):
    if not page_text.strip():
        continue

    # Translate the text of the current page
    translated_text = translator.translate(page_text)

    # Add a new page
    pdf.add_page()

    # Add translated text to the PDF
    pdf.multi_cell(0, 10, f"Page {i + 1}:\n\n{translated_text}")

    print(f"Translated page {i + 1}")

# Save the output PDF
pdf.output(args.output)

print(f"Translation completed. The translated PDF is saved as {args.output}")

