#!/usr/bin/env python3

import subprocess
import os
import argparse
import sqlite3
from pathlib import Path
import json
import math
from multiprocessing import Pool
from PIL import Image
import glob
import shutil


def num2deg(x_tile, y_tile, zoom):
    """Convert tile numbers to latitude and longitude at a given zoom level."""
    n = 2.0**zoom
    lon_deg = x_tile / n * 360.0 - 180.0
    lat_rad = math.atan(math.sinh(math.pi * (1 - 2 * y_tile / n)))
    lat_deg = math.degrees(lat_rad)
    return lat_deg, lon_deg


def lonlat_to_mercator(lon, lat):
    """Convert longitude and latitude to Web Mercator (EPSG:3857)."""
    R_MAJOR = 6378137.0
    x = R_MAJOR * math.radians(lon)
    y = R_MAJOR * math.log(math.tan(math.pi / 4 + math.radians(lat) / 2))
    return x, y


def deg2num(lat_deg, lon_deg, zoom):
    """Convert latitude and longitude to tile numbers at a given zoom level."""
    lat_rad = math.radians(lat_deg)
    n = 2.0**zoom
    x_tile = int((lon_deg + 180.0) / 360.0 * n)
    y_tile = int(
        (1.0 - math.log(math.tan(lat_rad) + 1 / math.cos(lat_rad)) / math.pi) / 2.0 * n
    )
    return x_tile, y_tile


def mercator_to_lonlat(x, y):
    """Convert Web Mercator coordinates to longitude and latitude."""
    R_MAJOR = 6378137.0
    lon = math.degrees(x / R_MAJOR)
    lat = math.degrees(2 * math.atan(math.exp(y / R_MAJOR)) - math.pi / 2)
    return lon, lat


def reproject_geotiff(input_file, output_dir):
    """Reproject the input GeoTIFF to EPSG:3857."""
    reprojected_path = os.path.join(output_dir, "reprojected.tif")
    subprocess.run(
        [
            "gdalwarp",
            "-t_srs",
            "EPSG:3857",
            "-overwrite",
            "-co",
            "TILED=YES",
            input_file,
            reprojected_path,
        ],
        check=True,
    )
    print(f"Reprojected GeoTIFF saved as: {reprojected_path}")
    return reprojected_path


def slice_into_tiles(compressed_path, zoom=16):
    """Determine the tile indices covering the GeoTIFF at the specified zoom level."""
    result = subprocess.run(
        ["gdalinfo", "-json", compressed_path],
        capture_output=True,
        text=True,
        check=True,
    )
    gdalinfo = json.loads(result.stdout)

    min_x, min_y = gdalinfo["cornerCoordinates"]["lowerLeft"]
    max_x, max_y = gdalinfo["cornerCoordinates"]["upperRight"]

    def mercator_to_lonlat(x, y):
        lon = math.degrees(x / 6378137.0)
        lat = math.degrees(2 * math.atan(math.exp(y / 6378137.0)) - math.pi / 2)
        return lat, lon

    lat_min, lon_min = mercator_to_lonlat(min_x, min_y)
    lat_max, lon_max = mercator_to_lonlat(max_x, max_y)

    x_tile_min, y_tile_max = deg2num(lat_max, lon_min, zoom)
    x_tile_max, y_tile_min = deg2num(lat_min, lon_max, zoom)

    x_tile_min, x_tile_max = sorted([x_tile_min, x_tile_max])
    y_tile_min, y_tile_max = sorted([y_tile_min, y_tile_max])

    return x_tile_min, x_tile_max, y_tile_min, y_tile_max


def slice_and_process_tiles(
    reprojected_path, output_dir, start_zoom, end_zoom, processors, image_type, quality
):
    """Slice the reprojected GeoTIFF into tiles and process each tile with gdal2tiles in parallel."""
    # Determine the tile indices covering the GeoTIFF at the specified zoom level
    x_tile_min, x_tile_max, y_tile_min, y_tile_max = slice_into_tiles(
        reprojected_path, zoom=16
    )

    # Prepare tile processing parameters for multiprocessing
    tile_params = [
        (x, y, reprojected_path, output_dir, start_zoom, end_zoom, image_type, quality)
        for x in range(x_tile_min, x_tile_max + 1)
        for y in range(y_tile_min, y_tile_max + 1)
    ]

    # Process tiles in parallel using a pool of workers
    with Pool(processes=processors) as pool:
        pool.starmap(clip_and_generate_mbtiles, tile_params)


def convert_tiles_to_jpeg(tile_output_folder, quality):
    """Convert all PNG tiles in the output folder to JPEG."""
    for png_file in glob.glob(
        os.path.join(tile_output_folder, "**", "*.png"), recursive=True
    ):
        jpeg_file = png_file.replace(".png", ".jpg")
        with Image.open(png_file) as img:
            img.convert("RGB").save(jpeg_file, "JPEG", quality=quality)
        os.remove(png_file)  # Remove the PNG file after conversion


def convert_tiles_to_png8(tile_output_folder):
    """Convert all PNG tiles to PNG8 (256 colors) to reduce file size."""
    for png_file in glob.glob(
        os.path.join(tile_output_folder, "**", "*.png"), recursive=True
    ):
        with Image.open(png_file) as img:
            img = img.convert("P", palette=Image.ADAPTIVE, colors=256)
            img.save(png_file, "PNG")


def get_tile_bounds(x, y, zoom=16):
    """Calculate bounding box in Web Mercator coordinates for given x, y, and zoom level."""
    lat_max, lon_min = num2deg(x, y, zoom)
    lat_min, lon_max = num2deg(x + 1, y + 1, zoom)
    x_min, y_min = lonlat_to_mercator(lon_min, lat_min)
    x_max, y_max = lonlat_to_mercator(lon_max, lat_max)
    return x_min, y_min, x_max, y_max


def clip_and_generate_mbtiles(
    x, y, reprojected_path, output_dir, start_zoom, end_zoom, image_type, quality
):
    """Clip the reprojected GeoTIFF and generate an MBTiles file for each tile."""
    tile_bounds = get_tile_bounds(x, y)
    clipped_tile_path = os.path.join(output_dir, f"{x}_{y}.tif")
    tile_output_folder = os.path.join(output_dir, f"{x}_{y}")
    mbtiles_path = os.path.join(output_dir, f"{x}_{y}.mbtiles")

    # Ensure the output folder for the tile exists
    os.makedirs(tile_output_folder, exist_ok=True)

    # Clip the GeoTIFF to create smaller tiles
    subprocess.run(
        [
            "gdalwarp",
            "-te",
            str(tile_bounds[0]),
            str(tile_bounds[1]),
            str(tile_bounds[2]),
            str(tile_bounds[3]),
            "-ts",
            "8192",
            "8192",
            "-overwrite",
            reprojected_path,
            clipped_tile_path,
        ],
        check=True,
    )
    print(f"Clipped GeoTIFF saved as: {clipped_tile_path}")

    # Generate XYZ tiles with gdal2tiles for each clipped tile
    zoom_levels = f"{start_zoom}-{end_zoom}"

    subprocess.run(
        [
            "gdal2tiles.py",
            "-z",
            zoom_levels,
            "-w",
            "none",
            "-t",
            "Gdal2MbTiles",
            "-r",
            "cubic",
            "--xyz",  # Use XYZ tiling scheme
            clipped_tile_path,
            tile_output_folder,
        ],
        check=True,
    )
    print(f"Tile folder created at: {tile_output_folder}")

    # Process tiles based on image type
    if image_type.upper() == "JPEG":
        print(f"Converting tiles to JPEG format with quality {quality}...")
        convert_tiles_to_jpeg(tile_output_folder, quality)
    elif image_type.upper() == "PNG8":
        print("Converting PNG tiles to PNG8 format for smaller file size...")
        convert_tiles_to_png8(tile_output_folder)
    elif image_type.upper() == "PNG":
        print("Leaving PNG tiles as they are.")

    # Calculate bounds in WGS84
    min_lon, min_lat = mercator_to_lonlat(tile_bounds[0], tile_bounds[1])
    max_lon, max_lat = mercator_to_lonlat(tile_bounds[2], tile_bounds[3])
    bounds = [min_lon, min_lat, max_lon, max_lat]

    # Convert the folder structure to MBTiles format
    folder_to_mbtiles(
        tile_output_folder, mbtiles_path, image_type, start_zoom, end_zoom, bounds
    )
    shutil.rmtree(tile_output_folder)
    os.remove(clipped_tile_path)


def folder_to_mbtiles(
    folder_path, mbtiles_path, image_type, start_zoom, end_zoom, bounds
):
    """Traverse the generated folder structure and insert each tile into the MBTiles database."""
    conn = sqlite3.connect(mbtiles_path)
    c = conn.cursor()
    c.execute("PRAGMA synchronous=OFF;")
    c.execute("PRAGMA locking_mode=EXCLUSIVE;")
    c.execute("PRAGMA journal_mode=DELETE;")
    c.execute(
        """CREATE TABLE IF NOT EXISTS tiles (
            zoom_level INTEGER,
            tile_column INTEGER,
            tile_row INTEGER,
            tile_data BLOB,
            UNIQUE(zoom_level, tile_column, tile_row)
        );"""
    )
    c.execute(
        """CREATE TABLE IF NOT EXISTS metadata (name TEXT, value TEXT, UNIQUE(name));"""
    )

    # Set the appropriate format extension and metadata for MBTiles
    format_ext = "jpg" if image_type.upper() == "JPEG" else "png"

    # Metadata for MBTiles
    metadata = [
        ("name", "Generated Map Tiles"),
        ("type", "baselayer"),
        ("version", "1.0"),
        ("description", "MBTiles file generated from GeoTIFF."),
        ("format", format_ext),
        ("minzoom", str(start_zoom)),
        ("maxzoom", str(end_zoom)),
        ("bounds", ",".join(map(str, bounds))),
    ]
    c.executemany(
        "INSERT OR REPLACE INTO metadata (name, value) VALUES (?, ?);", metadata
    )

    # Insert tiles
    for zoom_dir in Path(folder_path).iterdir():
        if zoom_dir.is_dir() and zoom_dir.name.isdigit():
            zoom = int(zoom_dir.name)
            for x_dir in zoom_dir.iterdir():
                if x_dir.is_dir() and x_dir.name.isdigit():
                    x = int(x_dir.name)
                    for tile_file in x_dir.glob(f"*.{format_ext}"):
                        y = int(tile_file.stem)
                        with open(tile_file, "rb") as img_file:
                            tile_data = img_file.read()
                        tms_y = (2**zoom - 1) - y
                        c.execute(
                            "INSERT OR REPLACE INTO tiles (zoom_level, tile_column, tile_row, tile_data) VALUES (?, ?, ?, ?);",
                            (zoom, x, tms_y, tile_data),
                        )

    conn.commit()
    conn.close()
    print(f"MBTiles file created at: {mbtiles_path}")


def main():
    parser = argparse.ArgumentParser(
        description="Generate MBTiles files from a GeoTIFF using gdal2tiles."
    )
    parser.add_argument(
        "-f", "--file", required=True, help="Path to the input GeoTIFF file."
    )
    parser.add_argument(
        "-o",
        "--output-dir",
        default="mbtiles",
        help="Output directory for MBTiles files.",
    )
    parser.add_argument(
        "-t",
        "--image-type",
        choices=["PNG", "PNG8", "JPEG"],
        default="JPEG",
        help="Image type for tiles (default: JPEG).",
    )
    parser.add_argument(
        "-q",
        "--quality",
        type=int,
        help="JPEG image quality (only used if image type is JPEG).",
    )
    parser.add_argument(
        "-sz",
        "--start-zoom",
        type=int,
        default=16,
        help="Start zoom level (default: 16).",
    )
    parser.add_argument(
        "-ez", "--end-zoom", type=int, default=21, help="End zoom level (default: 21)."
    )
    parser.add_argument(
        "-p", "--processors", type=int, default=1, help="Number of processors to use."
    )
    args = parser.parse_args()

    # Only apply quality validation if the image type is JPEG and -q is provided
    if args.image_type.upper() == "JPEG" and args.quality is None:
        args.quality = 70  # Default quality for JPEG if not specified

    elif args.image_type.upper() != "JPEG" and args.quality is not None:
        parser.error("The -q/--quality option is only valid when image type is JPEG.")

    # Ensure the output directory exists
    os.makedirs(args.output_dir, exist_ok=True)

    # Step 1: Reproject the GeoTIFF
    reprojected_path = reproject_geotiff(args.file, args.output_dir)

    # Step 2: Slice and process tiles in parallel
    slice_and_process_tiles(
        reprojected_path,
        args.output_dir,
        args.start_zoom,
        args.end_zoom,
        args.processors,
        args.image_type,
        args.quality,
    )
    os.remove(reprojected_path)


if __name__ == "__main__":
    main()
